{"version":3,"sources":["image.svg","Components/ImageUploader/ImageUploader.js","Components/ImagePreview/ImagePreview.js","check.svg","Components/MainCard/MainCard.js","App.js","reportWebVitals.js","index.js"],"names":["ImageUploader","props","Fragment","className","onDragOver","e","preventDefault","onDragEnter","onDragLeave","onDrop","files","dataTransfer","image","formData","FormData","append","name","onSetLoading","axios","post","headers","Authorization","then","response","console","log","onSetPreview","data","link","onFileUpload","src","PlaceholderImg","alt","type","onChange","target","fileChange","id","ImagePreview","storedPicturePreview","MainCard","useState","setStoredPicturePreview","isLoading","setIsLoading","inputEl","useRef","color","height","width","picIsLoading","preview","ReadyIcon","ref","readOnly","value","onClick","copyText","current","select","setSelectionRange","document","execCommand","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d6961219.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.15f988ba.svg\";","import React from \"react\";\r\nimport \"./ImageUploader.css\";\r\nimport axios from \"axios\";\r\nimport PlaceholderImg from \"../../image.svg\";\r\n\r\nfunction ImageUploader (props) {\r\n\tconst onFileUpload = (image) => {\r\n\t\t// Create an object of formData\r\n\t\tconst formData = new FormData();\r\n\r\n\t\t// Update the formData object\r\n\t\tformData.append(\"image\", image, image.name);\r\n\r\n\t\tprops.onSetLoading(true);\r\n\t\t// Request made to the backend api\r\n\t\t// Send formData object\r\n\t\taxios\r\n\t\t\t.post(\"https://api.imgur.com/3/image/\", formData, {\r\n\t\t\t\theaders: { Authorization: \"Client-ID 7e5c728ed16ed17\" }\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tprops.onSetLoading(false);\r\n\t\t\t\tprops.onSetPreview(response.data.data.link);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst dragOver = (e) => e.preventDefault();\r\n\tconst dragEnter = (e) => e.preventDefault();\r\n\tconst dragLeave = (e) => e.preventDefault();\r\n\r\n\tconst fileDrop = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst files = e.dataTransfer.files;\r\n\t\tonFileUpload(files[0]);\r\n\t\tprops.onSetPreview(files[0]);\r\n\r\n\t\tconsole.log(files[0], \" files 0\");\r\n\t};\r\n\r\n\t\r\n\tconst fileChange = (e) => {\r\n\t\tconsole.log(e.target.files[0], ' filechange')\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"drop-container\"\r\n\t\t\t\t\tonDragOver={dragOver}\r\n\t\t\t\t\tonDragEnter={dragEnter}\r\n\t\t\t\t\tonDragLeave={dragLeave}\r\n\t\t\t\t\tonDrop={fileDrop}\r\n\t\t\t\t>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"placeholder-image\"\r\n\t\t\t\t\t\tsrc={PlaceholderImg}\r\n\t\t\t\t\t\talt=\"Logo\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<p>Drag & Drop your image here</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>Or</p>\r\n\t\t\t\t<input type=\"file\" onChange={ (e) => fileChange(e)} id=\"file\"/>\r\n\t\t\t\t{/* <span className=\"submit-button\" onClick={onFileUpload}>\r\n\t\t\t\t\tChoose a file\r\n\t\t\t\t</span> */}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default ImageUploader;\r\n","import React from 'react'\r\n\r\nfunction ImagePreview(props) {\r\n    return (\r\n        <div className=\"preview-div\">\r\n            {props.storedPicturePreview && (\r\n                <img\r\n                    id=\"thumb\"\r\n                    className=\"thumb\"\r\n                    // src={props.storedPicturePreview}\r\n                    src='https://i.imgur.com/avAmUtJ.jpg'\r\n                    alt=\"your preview\"\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImagePreview\r\n","export default __webpack_public_path__ + \"static/media/check.793b3f2c.svg\";","import React, { useState, useRef } from \"react\";\r\nimport \"./MainCard.css\";\r\nimport ImageUploader from \"../ImageUploader/ImageUploader\";\r\nimport ImagePreview from \"../ImagePreview/ImagePreview\";\r\nimport ReadyIcon from \"../../check.svg\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction MainCard (props) {\r\n\tconst [ storedPicturePreview, setStoredPicturePreview ] = useState('https://i.imgur.com/avAmUtJ.jpg');\r\n\tconst [ isLoading, setIsLoading ] = useState(false);\r\n\tconst inputEl = useRef();\r\n\r\n\tconst setLoading = (picIsLoading) => {\r\n\t\tconsole.log(picIsLoading);\r\n\t\tsetIsLoading(picIsLoading);\r\n\t};\r\n\r\n\tconst setPreview = (preview) => {\r\n\t\tconsole.log(preview, \" preview\");\r\n\t\t// if(!storedPicturePreview !== undefined){\r\n\t\t// \tconsole.log('running this ', storedPicturePreview)\r\n\t\t// \tsetStoredPicturePreview(URL.createObjectURL(preview));\r\n\t\t// }else{\r\n\t\t\tsetStoredPicturePreview(preview);\r\n\t\t//}\r\n\t};\r\n\r\n\tconst copyToClipboard = () => {\r\n\t\tvar copyText = inputEl.current;\r\n\r\n\t\t/* Select the text field */\r\n\t\tcopyText.select();\r\n\t\tcopyText.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n\t\t/* Copy the text inside the text field */\r\n\t\tdocument.execCommand(\"copy\");\r\n\t\tconsole.log(inputEl.current.value, \" current\");\r\n\t\t/* Alert the copied text */\r\n\t\t//alert(\"Copied the text: \" + copyText.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={ isLoading ? \"mainCard small\" : \"mainCard\"}>\r\n\t\t\t{isLoading && (\r\n\t\t\t\t<Loader\r\n\t\t\t\t\ttype=\"Puff\"\r\n\t\t\t\t\tclassName=\"loader\"\r\n\t\t\t\t\tcolor=\"#00BFFF\"\r\n\t\t\t\t\theight={100}\r\n\t\t\t\t\twidth={100}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t{!isLoading &&\r\n\t\t\t!storedPicturePreview && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"title\">Upload your image</div>\r\n\t\t\t\t\t<p className=\"sub-title\">File should be Jpeg, Png...</p>\r\n\r\n\t\t\t\t\t{/* Image uploader here */}\r\n\t\t\t\t\t<ImageUploader\r\n\t\t\t\t\t\tonSetLoading={setLoading}\r\n\t\t\t\t\t\tonSetPreview={setPreview}\r\n\t\t\t\t\t\tstoredPicturePreview={storedPicturePreview}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{!isLoading &&\r\n\t\t\tstoredPicturePreview && (\r\n\t\t\t\t<div className=\"upload-completed-div\">\r\n\t\t\t\t\t<div className=\"upload-completed-div\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tclassName=\"ready-icon\"\r\n\t\t\t\t\t\t\tsrc={ReadyIcon}\r\n\t\t\t\t\t\t\talt=\"Logo\"\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className=\"title\">Uploaded Successfully</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ImagePreview storedPicturePreview={storedPicturePreview} />\r\n\t\t\t\t\t<div className=\"upload-completed-copy-div\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tref={inputEl}\r\n\t\t\t\t\t\t\tid=\"copy-link\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\t\tclassName=\"uploaded-link\"\r\n\t\t\t\t\t\t\tvalue={storedPicturePreview}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclassName=\"submit-button\"\r\n\t\t\t\t\t\t\tonClick={copyToClipboard}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tCopy Link\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default MainCard;\r\n","import \"./App.css\";\r\nimport MainCard from \"./Components/MainCard/MainCard\";\r\n\r\nfunction App () {\r\n\treturn (\r\n\t\t<div className=\"fragment\">\r\n\t\t\t<MainCard />\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}